package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
	"time"

	"github.com/inklabs/rangedb/pkg/structparser"
)

func main() {
	pkg := flag.String("package", "", "package")
	id := flag.String("id", "", "id")
	aggregateType := flag.String("aggregateType", "", "stream identifier")
	inFilePath := flag.String("inFile", "", "input filename containing structs")
	outFilePath := flag.String("outFile", "", "output filename containing generated struct methods")
	flag.Parse()

	file, err := os.Open(*inFilePath)
	if err != nil {
		log.Fatalf("unable to open (%s): %v", *inFilePath, err)
	}

	if *outFilePath == "" {
		fileName := strings.TrimSuffix(*inFilePath, path.Ext(*inFilePath))
		*outFilePath = fmt.Sprintf("%s_gen.go", fileName)
	}

	eventNames, err := structparser.GetStructNames(file)
	if err != nil {
		log.Fatalf("unable to extract events: %v", err)
	}

	_ = file.Close()

	outFile, err := os.Create(*outFilePath)
	if err != nil {
		log.Fatalf("unable to create events file: %v", err)
	}

	writeEvents(*pkg, *id, *aggregateType, eventNames, outFile)

	_ = outFile.Close()
}

func writeEvents(pkg, id, aggregateType string, eventNames []string, file io.Writer) {
	err := fileTemplate.Execute(file, templateData{
		Timestamp:     time.Now(),
		EventNames:    eventNames,
		AggregateType: aggregateType,
		ID:            id,
		Package:       pkg,
	})
	if err != nil {
		log.Fatalf("unable to write to events file: %v", err)
	}
}

type templateData struct {
	Timestamp     time.Time
	EventNames    []string
	AggregateType string
	ID            string
	Package       string
}

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{ .Timestamp }}
package {{ $.Package }}
{{ range .EventNames }}
func (e {{ . }}) AggregateID() string { return e.{{ $.ID }} }
func (e {{ . }}) AggregateType() string { return "{{ $.AggregateType }}" }
func (e {{ . }}) EventType() string { return "{{ . }}" }
{{ end }}`))
