// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.0
// source: rangedb.proto

package rangedbpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingWithEventNumber uint64 `protobuf:"varint,1,opt,name=startingWithEventNumber,proto3" json:"startingWithEventNumber,omitempty"`
}

func (x *EventsRequest) Reset() {
	*x = EventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRequest) ProtoMessage() {}

func (x *EventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRequest.ProtoReflect.Descriptor instead.
func (*EventsRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{0}
}

func (x *EventsRequest) GetStartingWithEventNumber() uint64 {
	if x != nil {
		return x.StartingWithEventNumber
	}
	return 0
}

type EventsByStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName              string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	StartingWithEventNumber uint64 `protobuf:"varint,2,opt,name=startingWithEventNumber,proto3" json:"startingWithEventNumber,omitempty"`
}

func (x *EventsByStreamRequest) Reset() {
	*x = EventsByStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsByStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsByStreamRequest) ProtoMessage() {}

func (x *EventsByStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsByStreamRequest.ProtoReflect.Descriptor instead.
func (*EventsByStreamRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{1}
}

func (x *EventsByStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *EventsByStreamRequest) GetStartingWithEventNumber() uint64 {
	if x != nil {
		return x.StartingWithEventNumber
	}
	return 0
}

type EventsByAggregateTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateTypes          []string `protobuf:"bytes,1,rep,name=aggregateTypes,proto3" json:"aggregateTypes,omitempty"`
	StartingWithEventNumber uint64   `protobuf:"varint,2,opt,name=startingWithEventNumber,proto3" json:"startingWithEventNumber,omitempty"`
}

func (x *EventsByAggregateTypeRequest) Reset() {
	*x = EventsByAggregateTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsByAggregateTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsByAggregateTypeRequest) ProtoMessage() {}

func (x *EventsByAggregateTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsByAggregateTypeRequest.ProtoReflect.Descriptor instead.
func (*EventsByAggregateTypeRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{2}
}

func (x *EventsByAggregateTypeRequest) GetAggregateTypes() []string {
	if x != nil {
		return x.AggregateTypes
	}
	return nil
}

func (x *EventsByAggregateTypeRequest) GetStartingWithEventNumber() uint64 {
	if x != nil {
		return x.StartingWithEventNumber
	}
	return 0
}

type SubscribeToLiveEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToLiveEventsRequest) Reset() {
	*x = SubscribeToLiveEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToLiveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToLiveEventsRequest) ProtoMessage() {}

func (x *SubscribeToLiveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToLiveEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToLiveEventsRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{3}
}

type SubscribeToEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartingWithEventNumber uint64 `protobuf:"varint,1,opt,name=startingWithEventNumber,proto3" json:"startingWithEventNumber,omitempty"`
}

func (x *SubscribeToEventsRequest) Reset() {
	*x = SubscribeToEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToEventsRequest) ProtoMessage() {}

func (x *SubscribeToEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToEventsRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeToEventsRequest) GetStartingWithEventNumber() uint64 {
	if x != nil {
		return x.StartingWithEventNumber
	}
	return 0
}

type SubscribeToEventsByAggregateTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateTypes          []string `protobuf:"bytes,1,rep,name=aggregateTypes,proto3" json:"aggregateTypes,omitempty"`
	StartingWithEventNumber uint64   `protobuf:"varint,2,opt,name=startingWithEventNumber,proto3" json:"startingWithEventNumber,omitempty"`
}

func (x *SubscribeToEventsByAggregateTypeRequest) Reset() {
	*x = SubscribeToEventsByAggregateTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToEventsByAggregateTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToEventsByAggregateTypeRequest) ProtoMessage() {}

func (x *SubscribeToEventsByAggregateTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToEventsByAggregateTypeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToEventsByAggregateTypeRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeToEventsByAggregateTypeRequest) GetAggregateTypes() []string {
	if x != nil {
		return x.AggregateTypes
	}
	return nil
}

func (x *SubscribeToEventsByAggregateTypeRequest) GetStartingWithEventNumber() uint64 {
	if x != nil {
		return x.StartingWithEventNumber
	}
	return 0
}

type SaveEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateType string   `protobuf:"bytes,1,opt,name=AggregateType,proto3" json:"AggregateType,omitempty"`
	AggregateID   string   `protobuf:"bytes,2,opt,name=AggregateID,proto3" json:"AggregateID,omitempty"`
	Events        []*Event `protobuf:"bytes,3,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *SaveEventsRequest) Reset() {
	*x = SaveEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveEventsRequest) ProtoMessage() {}

func (x *SaveEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveEventsRequest.ProtoReflect.Descriptor instead.
func (*SaveEventsRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{6}
}

func (x *SaveEventsRequest) GetAggregateType() string {
	if x != nil {
		return x.AggregateType
	}
	return ""
}

func (x *SaveEventsRequest) GetAggregateID() string {
	if x != nil {
		return x.AggregateID
	}
	return ""
}

func (x *SaveEventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type SaveEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventsSaved uint32 `protobuf:"varint,1,opt,name=EventsSaved,proto3" json:"EventsSaved,omitempty"`
}

func (x *SaveEventResponse) Reset() {
	*x = SaveEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveEventResponse) ProtoMessage() {}

func (x *SaveEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveEventResponse.ProtoReflect.Descriptor instead.
func (*SaveEventResponse) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{7}
}

func (x *SaveEventResponse) GetEventsSaved() uint32 {
	if x != nil {
		return x.EventsSaved
	}
	return 0
}

type SaveEventFailureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventsSaved uint32 `protobuf:"varint,1,opt,name=EventsSaved,proto3" json:"EventsSaved,omitempty"`
}

func (x *SaveEventFailureResponse) Reset() {
	*x = SaveEventFailureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveEventFailureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveEventFailureResponse) ProtoMessage() {}

func (x *SaveEventFailureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveEventFailureResponse.ProtoReflect.Descriptor instead.
func (*SaveEventFailureResponse) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{8}
}

func (x *SaveEventFailureResponse) GetEventsSaved() uint32 {
	if x != nil {
		return x.EventsSaved
	}
	return 0
}

type TotalEventsInStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=StreamName,proto3" json:"StreamName,omitempty"`
}

func (x *TotalEventsInStreamRequest) Reset() {
	*x = TotalEventsInStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalEventsInStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalEventsInStreamRequest) ProtoMessage() {}

func (x *TotalEventsInStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalEventsInStreamRequest.ProtoReflect.Descriptor instead.
func (*TotalEventsInStreamRequest) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{9}
}

func (x *TotalEventsInStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

type TotalEventsInStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEvents uint64 `protobuf:"varint,1,opt,name=TotalEvents,proto3" json:"TotalEvents,omitempty"`
}

func (x *TotalEventsInStreamResponse) Reset() {
	*x = TotalEventsInStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalEventsInStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalEventsInStreamResponse) ProtoMessage() {}

func (x *TotalEventsInStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalEventsInStreamResponse.ProtoReflect.Descriptor instead.
func (*TotalEventsInStreamResponse) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{10}
}

func (x *TotalEventsInStreamResponse) GetTotalEvents() uint64 {
	if x != nil {
		return x.TotalEvents
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Data     string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Metadata string `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Event) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateType        string `protobuf:"bytes,1,opt,name=AggregateType,proto3" json:"AggregateType,omitempty"`
	AggregateID          string `protobuf:"bytes,2,opt,name=AggregateID,proto3" json:"AggregateID,omitempty"`
	GlobalSequenceNumber uint64 `protobuf:"varint,3,opt,name=GlobalSequenceNumber,proto3" json:"GlobalSequenceNumber,omitempty"`
	StreamSequenceNumber uint64 `protobuf:"varint,4,opt,name=StreamSequenceNumber,proto3" json:"StreamSequenceNumber,omitempty"`
	InsertTimestamp      uint64 `protobuf:"varint,5,opt,name=InsertTimestamp,proto3" json:"InsertTimestamp,omitempty"`
	EventID              string `protobuf:"bytes,6,opt,name=EventID,proto3" json:"EventID,omitempty"`
	EventType            string `protobuf:"bytes,7,opt,name=EventType,proto3" json:"EventType,omitempty"`
	Data                 string `protobuf:"bytes,8,opt,name=Data,proto3" json:"Data,omitempty"`
	Metadata             string `protobuf:"bytes,9,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rangedb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_rangedb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_rangedb_proto_rawDescGZIP(), []int{12}
}

func (x *Record) GetAggregateType() string {
	if x != nil {
		return x.AggregateType
	}
	return ""
}

func (x *Record) GetAggregateID() string {
	if x != nil {
		return x.AggregateID
	}
	return ""
}

func (x *Record) GetGlobalSequenceNumber() uint64 {
	if x != nil {
		return x.GlobalSequenceNumber
	}
	return 0
}

func (x *Record) GetStreamSequenceNumber() uint64 {
	if x != nil {
		return x.StreamSequenceNumber
	}
	return 0
}

func (x *Record) GetInsertTimestamp() uint64 {
	if x != nil {
		return x.InsertTimestamp
	}
	return 0
}

func (x *Record) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *Record) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Record) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Record) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

var File_rangedb_proto protoreflect.FileDescriptor

var file_rangedb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8b, 0x01, 0x0a, 0x27, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x85, 0x01, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x22, 0x3c,
	0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x1a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x1b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xca, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xb5, 0x05, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x42, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20,
	0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x57, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23,
	0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x20, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x61, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x62, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a,
	0x0b, 0x2e, 0x3b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x62, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rangedb_proto_rawDescOnce sync.Once
	file_rangedb_proto_rawDescData = file_rangedb_proto_rawDesc
)

func file_rangedb_proto_rawDescGZIP() []byte {
	file_rangedb_proto_rawDescOnce.Do(func() {
		file_rangedb_proto_rawDescData = protoimpl.X.CompressGZIP(file_rangedb_proto_rawDescData)
	})
	return file_rangedb_proto_rawDescData
}

var file_rangedb_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_rangedb_proto_goTypes = []interface{}{
	(*EventsRequest)(nil),                           // 0: rangedbpb.EventsRequest
	(*EventsByStreamRequest)(nil),                   // 1: rangedbpb.EventsByStreamRequest
	(*EventsByAggregateTypeRequest)(nil),            // 2: rangedbpb.EventsByAggregateTypeRequest
	(*SubscribeToLiveEventsRequest)(nil),            // 3: rangedbpb.SubscribeToLiveEventsRequest
	(*SubscribeToEventsRequest)(nil),                // 4: rangedbpb.SubscribeToEventsRequest
	(*SubscribeToEventsByAggregateTypeRequest)(nil), // 5: rangedbpb.SubscribeToEventsByAggregateTypeRequest
	(*SaveEventsRequest)(nil),                       // 6: rangedbpb.SaveEventsRequest
	(*SaveEventResponse)(nil),                       // 7: rangedbpb.SaveEventResponse
	(*SaveEventFailureResponse)(nil),                // 8: rangedbpb.SaveEventFailureResponse
	(*TotalEventsInStreamRequest)(nil),              // 9: rangedbpb.TotalEventsInStreamRequest
	(*TotalEventsInStreamResponse)(nil),             // 10: rangedbpb.TotalEventsInStreamResponse
	(*Event)(nil),                                   // 11: rangedbpb.Event
	(*Record)(nil),                                  // 12: rangedbpb.Record
}
var file_rangedb_proto_depIdxs = []int32{
	11, // 0: rangedbpb.SaveEventsRequest.Events:type_name -> rangedbpb.Event
	0,  // 1: rangedbpb.RangeDB.Events:input_type -> rangedbpb.EventsRequest
	1,  // 2: rangedbpb.RangeDB.EventsByStream:input_type -> rangedbpb.EventsByStreamRequest
	2,  // 3: rangedbpb.RangeDB.EventsByAggregateType:input_type -> rangedbpb.EventsByAggregateTypeRequest
	3,  // 4: rangedbpb.RangeDB.SubscribeToLiveEvents:input_type -> rangedbpb.SubscribeToLiveEventsRequest
	4,  // 5: rangedbpb.RangeDB.SubscribeToEvents:input_type -> rangedbpb.SubscribeToEventsRequest
	5,  // 6: rangedbpb.RangeDB.SubscribeToEventsByAggregateType:input_type -> rangedbpb.SubscribeToEventsByAggregateTypeRequest
	6,  // 7: rangedbpb.RangeDB.SaveEvents:input_type -> rangedbpb.SaveEventsRequest
	9,  // 8: rangedbpb.RangeDB.TotalEventsInStream:input_type -> rangedbpb.TotalEventsInStreamRequest
	12, // 9: rangedbpb.RangeDB.Events:output_type -> rangedbpb.Record
	12, // 10: rangedbpb.RangeDB.EventsByStream:output_type -> rangedbpb.Record
	12, // 11: rangedbpb.RangeDB.EventsByAggregateType:output_type -> rangedbpb.Record
	12, // 12: rangedbpb.RangeDB.SubscribeToLiveEvents:output_type -> rangedbpb.Record
	12, // 13: rangedbpb.RangeDB.SubscribeToEvents:output_type -> rangedbpb.Record
	12, // 14: rangedbpb.RangeDB.SubscribeToEventsByAggregateType:output_type -> rangedbpb.Record
	7,  // 15: rangedbpb.RangeDB.SaveEvents:output_type -> rangedbpb.SaveEventResponse
	10, // 16: rangedbpb.RangeDB.TotalEventsInStream:output_type -> rangedbpb.TotalEventsInStreamResponse
	9,  // [9:17] is the sub-list for method output_type
	1,  // [1:9] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_rangedb_proto_init() }
func file_rangedb_proto_init() {
	if File_rangedb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rangedb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsByStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsByAggregateTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToLiveEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToEventsByAggregateTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveEventFailureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalEventsInStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalEventsInStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rangedb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rangedb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rangedb_proto_goTypes,
		DependencyIndexes: file_rangedb_proto_depIdxs,
		MessageInfos:      file_rangedb_proto_msgTypes,
	}.Build()
	File_rangedb_proto = out.File
	file_rangedb_proto_rawDesc = nil
	file_rangedb_proto_goTypes = nil
	file_rangedb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RangeDBClient is the client API for RangeDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RangeDBClient interface {
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (RangeDB_EventsClient, error)
	EventsByStream(ctx context.Context, in *EventsByStreamRequest, opts ...grpc.CallOption) (RangeDB_EventsByStreamClient, error)
	EventsByAggregateType(ctx context.Context, in *EventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_EventsByAggregateTypeClient, error)
	SubscribeToLiveEvents(ctx context.Context, in *SubscribeToLiveEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToLiveEventsClient, error)
	SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsClient, error)
	SubscribeToEventsByAggregateType(ctx context.Context, in *SubscribeToEventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsByAggregateTypeClient, error)
	SaveEvents(ctx context.Context, in *SaveEventsRequest, opts ...grpc.CallOption) (*SaveEventResponse, error)
	TotalEventsInStream(ctx context.Context, in *TotalEventsInStreamRequest, opts ...grpc.CallOption) (*TotalEventsInStreamResponse, error)
}

type rangeDBClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeDBClient(cc grpc.ClientConnInterface) RangeDBClient {
	return &rangeDBClient{cc}
}

func (c *rangeDBClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (RangeDB_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[0], "/rangedbpb.RangeDB/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) EventsByStream(ctx context.Context, in *EventsByStreamRequest, opts ...grpc.CallOption) (RangeDB_EventsByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[1], "/rangedbpb.RangeDB/EventsByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsByStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsByStreamClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsByStreamClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsByStreamClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) EventsByAggregateType(ctx context.Context, in *EventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_EventsByAggregateTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[2], "/rangedbpb.RangeDB/EventsByAggregateType", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsByAggregateTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsByAggregateTypeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsByAggregateTypeClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsByAggregateTypeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SubscribeToLiveEvents(ctx context.Context, in *SubscribeToLiveEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToLiveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[3], "/rangedbpb.RangeDB/SubscribeToLiveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToLiveEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToLiveEventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToLiveEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToLiveEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[4], "/rangedbpb.RangeDB/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToEventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SubscribeToEventsByAggregateType(ctx context.Context, in *SubscribeToEventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsByAggregateTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeDB_serviceDesc.Streams[5], "/rangedbpb.RangeDB/SubscribeToEventsByAggregateType", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToEventsByAggregateTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToEventsByAggregateTypeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToEventsByAggregateTypeClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToEventsByAggregateTypeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SaveEvents(ctx context.Context, in *SaveEventsRequest, opts ...grpc.CallOption) (*SaveEventResponse, error) {
	out := new(SaveEventResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/SaveEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeDBClient) TotalEventsInStream(ctx context.Context, in *TotalEventsInStreamRequest, opts ...grpc.CallOption) (*TotalEventsInStreamResponse, error) {
	out := new(TotalEventsInStreamResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/TotalEventsInStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeDBServer is the server API for RangeDB service.
type RangeDBServer interface {
	Events(*EventsRequest, RangeDB_EventsServer) error
	EventsByStream(*EventsByStreamRequest, RangeDB_EventsByStreamServer) error
	EventsByAggregateType(*EventsByAggregateTypeRequest, RangeDB_EventsByAggregateTypeServer) error
	SubscribeToLiveEvents(*SubscribeToLiveEventsRequest, RangeDB_SubscribeToLiveEventsServer) error
	SubscribeToEvents(*SubscribeToEventsRequest, RangeDB_SubscribeToEventsServer) error
	SubscribeToEventsByAggregateType(*SubscribeToEventsByAggregateTypeRequest, RangeDB_SubscribeToEventsByAggregateTypeServer) error
	SaveEvents(context.Context, *SaveEventsRequest) (*SaveEventResponse, error)
	TotalEventsInStream(context.Context, *TotalEventsInStreamRequest) (*TotalEventsInStreamResponse, error)
}

// UnimplementedRangeDBServer can be embedded to have forward compatible implementations.
type UnimplementedRangeDBServer struct {
}

func (*UnimplementedRangeDBServer) Events(*EventsRequest, RangeDB_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (*UnimplementedRangeDBServer) EventsByStream(*EventsByStreamRequest, RangeDB_EventsByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsByStream not implemented")
}
func (*UnimplementedRangeDBServer) EventsByAggregateType(*EventsByAggregateTypeRequest, RangeDB_EventsByAggregateTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsByAggregateType not implemented")
}
func (*UnimplementedRangeDBServer) SubscribeToLiveEvents(*SubscribeToLiveEventsRequest, RangeDB_SubscribeToLiveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLiveEvents not implemented")
}
func (*UnimplementedRangeDBServer) SubscribeToEvents(*SubscribeToEventsRequest, RangeDB_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (*UnimplementedRangeDBServer) SubscribeToEventsByAggregateType(*SubscribeToEventsByAggregateTypeRequest, RangeDB_SubscribeToEventsByAggregateTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEventsByAggregateType not implemented")
}
func (*UnimplementedRangeDBServer) SaveEvents(context.Context, *SaveEventsRequest) (*SaveEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEvents not implemented")
}
func (*UnimplementedRangeDBServer) TotalEventsInStream(context.Context, *TotalEventsInStreamRequest) (*TotalEventsInStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalEventsInStream not implemented")
}

func RegisterRangeDBServer(s *grpc.Server, srv RangeDBServer) {
	s.RegisterService(&_RangeDB_serviceDesc, srv)
}

func _RangeDB_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).Events(m, &rangeDBEventsServer{stream})
}

type RangeDB_EventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_EventsByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsByStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).EventsByStream(m, &rangeDBEventsByStreamServer{stream})
}

type RangeDB_EventsByStreamServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsByStreamServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsByStreamServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_EventsByAggregateType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsByAggregateTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).EventsByAggregateType(m, &rangeDBEventsByAggregateTypeServer{stream})
}

type RangeDB_EventsByAggregateTypeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsByAggregateTypeServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsByAggregateTypeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SubscribeToLiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToLiveEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToLiveEvents(m, &rangeDBSubscribeToLiveEventsServer{stream})
}

type RangeDB_SubscribeToLiveEventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToLiveEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToLiveEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToEvents(m, &rangeDBSubscribeToEventsServer{stream})
}

type RangeDB_SubscribeToEventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SubscribeToEventsByAggregateType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsByAggregateTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToEventsByAggregateType(m, &rangeDBSubscribeToEventsByAggregateTypeServer{stream})
}

type RangeDB_SubscribeToEventsByAggregateTypeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToEventsByAggregateTypeServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToEventsByAggregateTypeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SaveEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).SaveEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/SaveEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).SaveEvents(ctx, req.(*SaveEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeDB_TotalEventsInStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalEventsInStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).TotalEventsInStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/TotalEventsInStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).TotalEventsInStream(ctx, req.(*TotalEventsInStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RangeDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rangedbpb.RangeDB",
	HandlerType: (*RangeDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveEvents",
			Handler:    _RangeDB_SaveEvents_Handler,
		},
		{
			MethodName: "TotalEventsInStream",
			Handler:    _RangeDB_TotalEventsInStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _RangeDB_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsByStream",
			Handler:       _RangeDB_EventsByStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsByAggregateType",
			Handler:       _RangeDB_EventsByAggregateType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLiveEvents",
			Handler:       _RangeDB_SubscribeToLiveEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _RangeDB_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEventsByAggregateType",
			Handler:       _RangeDB_SubscribeToEventsByAggregateType_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rangedb.proto",
}
